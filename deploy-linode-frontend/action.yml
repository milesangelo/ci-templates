name: "Deploy Frontend App to Linode"
description: "Builds Docker image, pushes to GHCR, and deploys to Linode over SSH"

inputs:
  docker_image_name:
    description: "Docker Image Name"
    required: true
  docker_container_name:
    description: "Name for the running container"
    required: true
  port:
    description: "Docker internal port"
    default: "80"
  env_vars:
    required: false
    description: "Multiline string of KEY=VALUE env vars to write to .env"
  ssh_private_key:
    description: "Private key for the remote destination server (use LINODE_SSH_PRIVATE_KEY secret)"
    required: true
  linode_username:
    description: "linode remote server username"
    required: true
  linode_host:
    description: "linode remote server ip host"
    required: true
  github_token:
    description: "token for pushing to ghcr.io"
    required: true
  nginx_conf_dir:
    description: "Path to the nginx config directory in the repo (optional)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set lowercase repository owner
      shell: bash
      run: echo "REPO_OWNER_LOWERCASE=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Cache yarn and Vite
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/yarn
          node_modules
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: ${{ runner.os }}-yarn-

    - name: Install dependencies and build Vite app
      shell: bash
      run: |
        yarn install --frozen-lockfile
        yarn build

    - name: Create .env file
      shell: bash
      run: echo "${{ inputs.env_vars }}" > .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Build and push Docker image with prebuilt dist
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LOWERCASE }}/${{ inputs.docker_image_name }}:${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LOWERCASE }}/${{ inputs.docker_image_name }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-contexts: |
          dist=./dist

    - name: Set up SSH
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh_private_key }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        chmod 700 ~/.ssh

        # Add SSH key to agent or specify key explicitly
        ssh-add ~/.ssh/deploy_key || true

        # Debug: Check key format and test connection
        echo "SSH Key first line:"
        head -n 1 ~/.ssh/deploy_key
        echo "SSH Key last line:"
        tail -n 1 ~/.ssh/deploy_key

        # Test SSH connection with explicit key
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -v ${{ inputs.linode_username }}@${{ inputs.linode_host }} 'echo "SSH connection successful"'

    - name: Deploy on Linode
      shell: bash
      run: |
        # Copy .env to Linode
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no .env ${{ inputs.linode_username }}@${{ inputs.linode_host }}:/home/${{ inputs.linode_username }}/.env

        # Deploy via SSH
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ inputs.linode_username }}@${{ inputs.linode_host }} << 'ENDSSH'
          set -e
          echo "${{ inputs.github_token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the new image
          docker pull ghcr.io/${{ env.REPO_OWNER_LOWERCASE }}/${{ inputs.docker_image_name }}:latest || exit 1
          
          # Stop and remove existing container if it exists
          docker stop ${{ inputs.docker_container_name }} || true
          docker rm ${{ inputs.docker_container_name }} || true
          
          # Run the new container
          docker run -d \
            --name ${{ inputs.docker_container_name }} \
            --restart unless-stopped \
            -p 3000:${{ inputs.port }} \
            --env-file /home/${{ inputs.linode_username }}/.env \
            ghcr.io/${{ env.REPO_OWNER_LOWERCASE }}/${{ inputs.docker_image_name }}:latest || exit 1
          
          # Verify container is running
          docker ps | grep ${{ inputs.docker_container_name }} || exit 1
          
          # Cleanup
          docker image prune -af
          docker logout ghcr.io
        ENDSSH
      continue-on-error: false
